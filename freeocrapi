using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using System.IO;
using System.Linq.Expressions;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Tesseract;
using TiffLibrary;
using Volo.Abp;
using Volo.Abp.Application.Services;
using Volo.Abp.DependencyInjection;
using iText.Kernel.Pdf;



public class FreeOcrOnlinePostMan :ApplicationService, ITransientDependency
{
    private const string ApiKey = "K87930450588957";
    private readonly IWebHostEnvironment _webHostEnvironment;
    private const string OcrApiUrl = "https://api.ocr.space/parse/image";
//    https://api.ocr.space/Parse/Image

    public FreeOcrOnlinePostMan(IWebHostEnvironment webHostEnvironment)
    {
        _webHostEnvironment = webHostEnvironment;
    }


    //private Pix ConvertBitmapToPix(Bitmap bitmap)
    //{
    //    // Save the bitmap to a memory stream as PNG (you can also save as TIFF if you prefer)
    //    using (var ms = new MemoryStream())
    //    {
    //        bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
    //        ms.Seek(0, SeekOrigin.Begin);

    //        // Load the PNG from the memory stream into a Pix object
    //        return Pix.LoadFromMemory(ms.ToArray());
    //    }
    //}
    public async Task<string> ProcessImageAsync(List<IFormFile> inputAll)
    {
        try
        {

            int count = 1;
            var pdfFilePaths = new List<string>();


                
            foreach (var input in inputAll)
            {
                var outputPath = Path.Combine(_webHostEnvironment.WebRootPath, count+"output.pdf");
                string resultFilePath = Path.Combine(_webHostEnvironment.WebRootPath, count+ "_highlighted.png");
                //var stream = new MemoryStream();
                //await input.CopyToAsync(stream);
                //var img = Image.FromStream(stream);


                //var bitmap = new Bitmap(img);
                //Pix pix = ConvertBitmapToPix(bitmap);


                //using (var engine = new TesseractEngine("C:\\Users\\KISHORE\\Desktop\\kiruba\\newWeb\\SpeechToText\\src\\SpeechToText.Application\\Tesseract\\", "eng", EngineMode.Default))
                //{
                //    using (var page = engine.Process(pix))
                //    {


                //        // Save the image with highlights
                //        Pix imgs = page.GetThresholdedImage();

                //        //bitmap.Save(resultFilePath, System.Drawing.Imaging.ImageFormat.Tiff);
                //        imgs.Save(resultFilePath, Tesseract.ImageFormat.Png);


                //    }
                //}

                // Save the file
                using (var fileStream = new FileStream(resultFilePath, FileMode.Create))
                {
                    await input.CopyToAsync(fileStream);
                }

                HttpClient httpClient = new HttpClient();
                httpClient.Timeout = new TimeSpan(1, 1, 1);


                MultipartFormDataContent form = new MultipartFormDataContent();
                form.Add(new StringContent(ApiKey), "apikey");
                form.Add(new StringContent("eng"), "language");
                form.Add(new StringContent("true"), "IsOverlayRequired");
                form.Add(new StringContent("true"), "iscreatesearchablepdf");
                form.Add(new StringContent("true"), "issearchablepdfhidetextlayer");
                var fileContent = new ByteArrayContent(File.ReadAllBytes(resultFilePath));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue("multipart/form-data");
                form.Add(fileContent, "file", Path.GetFileName(resultFilePath));
                HttpResponseMessage response = await httpClient.PostAsync("https://api.ocr.space/Parse/Image", form);
                string result = await response.Content.ReadAsStringAsync();
                dynamic jsonResponse = Newtonsoft.Json.JsonConvert.DeserializeObject(result);
                Task.Delay(3000);
                string pdfUrl = jsonResponse?.SearchablePDFURL;

                using (var pdfResponse = await httpClient.GetAsync(pdfUrl))
                {
                    if (!pdfResponse.IsSuccessStatusCode)
                        throw new Exception("Failed to download the generated searchable PDF.");

                    // Save the PDF to the specified output path
                    byte[] pdfData = await pdfResponse.Content.ReadAsByteArrayAsync();
                    File.WriteAllBytes(outputPath, pdfData);
                    pdfFilePaths.Add(outputPath);

                }
                count++;
            }


            string mergedPdfPath = Path.Combine(_webHostEnvironment.WebRootPath, "merged_output.pdf");
          //  MergePdfs(pdfFilePaths, mergedPdfPath);

            return mergedPdfPath;
        }
        catch (Exception ex)
        {
            throw new UserFriendlyException(ex.Message);
        }
        
    }


    public void MergePdfs(List<string> pdfFilePaths, string outputFilePath)
    {
        try
        {

            using (PdfWriter writer = new PdfWriter(outputFilePath))
            using (PdfDocument mergedPdf = new PdfDocument(writer))
                foreach (var pdfFilePath in pdfFilePaths)
                {
                    {
                        using (PdfReader reader = new PdfReader(pdfFilePath))
                        using (PdfDocument pdf = new PdfDocument(reader))
                        {
                            pdf.CopyPagesTo(1, pdf.GetNumberOfPages(), mergedPdf);
                        }
                    }
                }
        }
        catch (Exception ex)
        {
            throw new UserFriendlyException($"{ex.Message}");
        }
    }
}





        [HttpPost("postman-pdf")]

        public async Task<string> ProcessOcrPostman(List<IFormFile> input)
        {
            string url=await _oCRpostGeneration.ProcessImageAsync(input);
            var filePath = Path.Combine(_webHostEnvironment.WebRootPath, "output.pdf");

            // Check if the file exists

            // Read the file into a byte array
           // byte[] fileBytes = File.ReadAllBytes(filePath);

            // Return the file as a downloadable content (PDF)
            //  return File(fileBytes, "application/pdf", "output.pdf");
            return url;     
        }


